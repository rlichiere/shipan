"""
Django settings for shipan project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os
import sys

from django.contrib.messages import constants as messages
from django.utils.translation import gettext_lazy as _

from .core.exceptions import ShipanError
from .utils_settings import SettingsLoader, SettingsLogger


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/



# Load Environment Variables
loader = SettingsLoader(prefix='shipan.settings',
                        default_secret_key='ThisS3cr3tK3y3x@mpl3Sh0uldN3v3r!B3Us3dOnPr0ducti0n')

# Initialize the logger dedicated to settings because of it slow-level position
logger = SettingsLogger(func_name='shipan.settings', loader=loader)

try:
    loader.parse(os.environ)
except ShipanError as e:
    logger.print_exc(e.message, e.__class__)
    exit(1)
# except Exception as e:
#     logger.print_err('Unexpected error: %s : %s' % (e.__class__.__name__, e.message))
#     logger.print_exc(e.message, e.__class__)
#     exit(1)

DEBUG = loader.DEBUG
LOG_LEVEL = loader.LOG_LEVEL
LOG_SERVICES = loader.LOG_SERVICES
SECRET_KEY = loader.SECRET_KEY



# Django settings

ALLOWED_HOSTS = ['*']



# Application definition

INSTALLED_APPS = [
    'backoffice.apps.BackofficeConfig',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'doc.apps.DocConfig',
    'tools.apps.ToolsConfig',
    'people.apps.PeopleConfig',
    'catalog.apps.CatalogConfig',
    'frontoffice.apps.FrontofficeConfig',
    'api.apps.ApiConfig',
    'docutils',
    'rest_framework',
    'widget_tweaks',
    'impersonate',
    'maintenance_mode',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'impersonate.middleware.ImpersonateMiddleware',

    'maintenance_mode.middleware.MaintenanceModeMiddleware', # as last middleware
]

ROOT_URLCONF = 'shipan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'maintenance_mode.context_processors.maintenance_mode',
            ],
        },
    },
]

WSGI_APPLICATION = 'shipan.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'people.auth_backends.CustomUserModelBackend',
)

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = [
    ('fr', _('French')),
    ('en', _('English')),
]

LOCALE_PATHS = ['locale', ]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '%s/static/' % BASE_DIR


# Media files (uploaded files)

MEDIA_ROOT = '%s/media/' % BASE_DIR
MEDIA_URL = '/media/'


CUSTOM_USER_MODEL = 'people.Client'

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}


# Login Redirect
LOGIN_URL = 'fo-home'
LOGIN_REDIRECT_URL = 'fo-home'


def skip_static_requests(record):
    if len(record.args) > 0:
        if (record.args[0].find('GET /static/') >= 0) \
              or (record.args[0].find('GET /favicon.ico ') >= 0) \
              or (record.args[0].find('GET / ') >= 0) \
              or (record.args[0].find('GET /admin/') >= 0):
            return False
    return True


# Logging Settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'skip_static_requests': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': skip_static_requests
        }
    },
    'formatters': {
        'custom': {
            'format': '%(levelname)s %(message)s'
        },
        'server_colored': {
            '()': 'colorlog.ColoredFormatter',
            'format': "%(log_color)s%(levelname)-8s%(reset)s %(cyan)s%(name)-16s%(reset)s %(message_log_color)s%(message)s",
            'secondary_log_colors': {
                'message': {
                    'ERROR': 'white,bg_red',
                    'CRITICAL': 'white,bg_red'
                },
                'levelname': {
                    'ERROR': 'white,bg_red',
                    'CRITICAL': 'white,bg_red'
                }
            }
        },
        'shipan_colored': {
            '()': 'colorlog.ColoredFormatter',
            'format': "%(log_color)s%(levelname)-8s%(reset)s %(cyan)s%(name)-16s%(reset)s %(message_log_color)s%(message)s",
            'secondary_log_colors': {
                'message': {
                    'ERROR': 'white,bg_red',
                    'CRITICAL': 'white,bg_red'
                },
                'levelname': {
                    'ERROR': 'white,bg_red',
                    'CRITICAL': 'white,bg_red'
                }
            }
        },
        'sql_colored': {
            '()': 'colorlog.ColoredFormatter',
            # 'format': '[SQL] %(log_color)s%(levelname)-8s%(reset)s %(cyan)s%(duration)-10s%(reset)s %(message_log_color)s%(sql)s',
            'format': '%(log_color)s%(levelname)-8s%(reset)s %(cyan)s%(duration)-10s%(reset)s',
            'secondary_log_colors': {
                'message': {
                    'ERROR': 'white,bg_red',
                    'CRITICAL': 'white,bg_red'
                },
                'levelname': {
                    'ERROR': 'white,bg_red',
                    'CRITICAL': 'white,bg_red'
                }
            }
        }
    },
    'handlers': {
        'server_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'server_colored',
            'filters': ['skip_static_requests'],
        },
        'shipan_console': {
            # 'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'shipan_colored',
        },
        'sql_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'sql_colored',
        },
    },
    'loggers': {
        # 'django': {
        #    'handlers': ['console'],
        #    'level': 'ERROR',
        #    'propagate': True,
        # },
        'django.db.backends': {
            'handlers': ['sql_console'],
            'level': LOG_LEVEL if 'SQL' in LOG_SERVICES else 'INFO',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['server_console'],
            'level': LOG_LEVEL if 'SERVER' in LOG_SERVICES else 'ERROR',
            # 'propagate': False,
        },
        'shipan': {
            'handlers': ['shipan_console'],
            'level': LOG_LEVEL if 'SHIPAN' in LOG_SERVICES else 'DEBUG',
        }
    },
}

# LOGGING['loggers']['django.db.backends'] = {
#     'handlers': ['sql_console'],
#     'level': LOG_LEVEL if 'SQL' in LOG_SERVICES else 'INFO',
#     'propagate': False,
# }
#
# LOGGING['loggers']['django.server'] = {
#     'handlers': ['server_console'],
#     'level': LOG_LEVEL if 'SERVER' in LOG_SERVICES else 'ERROR',
#     # 'propagate': False,
# }
#
# LOGGING['loggers']['shipan'] = {
#     'handlers': ['shipan_console'],
#     'level': LOG_LEVEL if 'SHIPAN' in LOG_SERVICES else 'DEBUG',
# }



DJANGO_COLORS = 'light'


# Impersonation
# https://pypi.org/project/django-impersonate/
IMPERSONATE = {
    'ALLOW_SUPERUSER': True,
    'REDIRECT_FIELD_NAME': 'next',
}


# Maintenance Mode
# https://github.com/fabiocaccamo/django-maintenance-mode
# MAINTENANCE_MODE = False
MAINTENANCE_MODE_STATE_FILE_PATH = 'media/status/maintenance_mode_state.txt'
MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
# MAINTENANCE_MODE_IGNORE_ANONYMOUS = True
# MAINTENANCE_MODE_IGNORE_VISITORS = True
MAINTENANCE_MODE_IGNORE_STAFF = True
MAINTENANCE_MODE_IGNORE_SUPERUSER = True



SHIPAN = {
    'DATA': {
        'ROOT': {
            'FOLDER': '/data',
            'DISK_QUOTA': 64,               # mb
            'RETENTION_PERIOD': 90          # days
        },
        'BACKUP': {
            'FOLDER': '/data/backup',
            'DISK_QUOTA': 64,               # mb
            'RETENTION_PERIOD': 365         # days
        },
    },
}
